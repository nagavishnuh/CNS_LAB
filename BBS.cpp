//BBS and Rabin Miller

#include <bits/stdc++.h>

using namespace std;

int genRand(int low, int high){
    int num = rand()%(high-low-1) + (low+1);
    if(num%4!=3){
        num = genRand(low,high);
    }
    return num;
}

int isPrime(int n){
    for(int i=2;i<=sqrt(n);i++){
        if(n%i==0){
            return 0;
        }
    }
    return 1;
}

int bbs(){
    int p=1,q=1;
    while(true){
        p = genRand(1,20);
        q = genRand(1,20);
        if(isPrime(p) && isPrime(q)){
            break;
        }
    }
    int n = p*q;
    int s;
    do{
        s = rand();
    }while(s%p==0 || s%q==0 || s==0);
    long long x = (long long)(s*s)%n;
    int B = 0;
    for(int i=0;i<10;i++){
        x = x*x%n;
        B = B << 1 | (x&1);
    }
    return B;
}

string rabinMiller(int num){
    int q,k;
    q = num-1;
    while(q%2==0){
        q /= 2;
        k++;
    }
    int a = 3;
    int powNum = pow(a,q);
    if((powNum%num)==1){
        return "Inconclusive";
    }
    for(int j=0;j<k;j++){
        int powJ = pow(2,j);
        powJ *= q;
        powNum = pow(a,powJ);
        if(powNum%num == (num-1)){
            return "Inconclusive";
        }
    }
    return "Composite";
}

int main(){
    srand(time(NULL));
    int randomNum = bbs();
    cout << "Random Number Generated by BBS is: "<<randomNum<<endl;
    string result = rabinMiller(randomNum);
    cout << "The nature of generated number is " <<result <<endl;
    return 0;
}